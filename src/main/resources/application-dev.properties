#You need to create local file env.properties and set variables for local DB
spring.config.import=file:env.properties
#
#-----Variables for local DB (recommended: Laragon+Postgres):
spring.datasource.url=${DB_URL}
spring.datasource.driverClassName=${DB_DRIVER_CLASS_NAME}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.jpa.database-platform=${DB_DATABASE_PLATFORM}
#
#-----settings for H2 console
#spring.h2.console.enabled=true
#spring.h2.console.path=/h2-console
#
#-----settings for: to show sql queries + "to beautify"
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true
#-------------------------------------------------------
#
#------------variables:
DB_DDL_AUTO=create
#----------------------
#
#setting for: to run the data initialization from data.sql (resp. all other data-${platform}.sql files)
######spring.sql.init.mode=always
#
#setting for: to run data.sql scripts AFTER the Hibernate created tables (by default is data.sql loaded before
# Hibernate created tables)
spring.jpa.defer-datasource-initialization=true
#
#Spring Boot enables the failfast feature of the Spring JDBC initializer by default, so if the scripts cause exceptions
# the application will fail to start.#
#To disable the failfast you can set spring.sql.init.continue-on-error=true. This can be useful once an application has
# matured and been deployed a few times, since the scripts can act as ?poor man?s migrations????inserts that fail
# mean that the data is already there, so there would be no need to prevent the application from running, for instance.
#(source: https://docs.spring.io/spring-boot/docs/1.1.0.M1/reference/html/howto-database-initialization.html)
SPRING_INIT_CONTINUE_ON_ERROR=false
